'''Video background attenuation using simple substraction.
'''

import numpy as np
import cv2

import logging
logger = logging.getLogger(__name__)
#logging.basicConfig(format="[%(filename)s:%(lineno)s %(funcName)s()] %(message)s")
#logger.setLevel(logging.CRITICAL)
#logger.setLevel(logging.ERROR)
#logger.setLevel(logging.WARNING)
logger.setLevel(logging.INFO)
#logger.setLevel(logging.DEBUG)

try:
    from google.colab.patches import cv2_imshow
    IN_COLAB = True
except:
    IN_COLAB = False
logger.info(f"Running in Google Colab: [IN_COLAB]")

def attenuate_background_img(
        prev_img,
        next_img,
        background_img,
        alpha=0.99,
        threshold=10):

    if IN_COLAB:
        if logger.getEffectiveLevel() <= logging.DEBUG:
            logging.debug(f"threshold={threshold}")
            print(f"prev ({prev_img.dtype})")
            cv2_imshow(prev_img)
            print(f"next ({next_img.dtype})")
            cv2_imshow(next_img)
            print(f"background ({background_img.dtype})")
            cv2_imshow(background_img)

    difference_img = next_img - background_img
    difference_img = np.clip(difference_img, 0.0, 255.0)
    background_pixels = np.where((difference_img > threshold), prev_img, 0.0)

    if IN_COLAB:
        if logger.getEffectiveLevel() <= logging.DEBUG:
            print(f"background_pixels ({background_pixels.dtype})")
            cv2_imshow(background_pixels)

    background_img = alpha*background_img + (1 - alpha)*background_pixels
    #background_img = next_img

    if IN_COLAB:
        if logger.getEffectiveLevel() < logging.WARNING:
            print(f"attenuated ({difference_img.dtype})")
            cv2_imshow(difference_img)

    return difference_img, background_img

def attenuate_background_seq(
        input_sequence_prefix="/tmp/input/",
        output_sequence_prefix="/tmp/output/",
        img_extension=".jpg",
        first_img_index=0,
        last_img_index=120,
        alpha=0.99,
        threshold=10):

    assert alpha <= 1.0
    first_img_prefix = input_sequence_prefix + str(first_img_index) + img_extension
    prev_img = cv2.imread(first_img_prefix, cv2.IMREAD_UNCHANGED).astype(np.float32)
    assert prev_img is not None, first_img_prefix
    background_img = np.zeros_like(prev_img)
    for i in range(first_img_index + 1, last_img_index):
        next_img_prefix = input_sequence_prefix + str(i) + img_extension
        next_img = cv2.imread(next_img_prefix, cv2.IMREAD_UNCHANGED).astype(np.float32)
        assert next_img is not None, next_img_prefix
        difference_img, background_img = attenuate_background_img(
            prev_img,
            next_img,
            background_img,
            alpha,
            threshold)
        prev_img = next_img

        difference_img_prefix = output_sequence_prefix + str(i) + img_extension
        cv2.imwrite(difference_img_prefix, difference_img.astype(np.uint8))

    if IN_COLAB:
        if logger.getEffectiveLevel() < logging.WARNING:
            print(f"background ({background_img.dtype})")
            cv2_imshow(background_img)

if __name__ == "__main__":

    def int_or_str(text):
        '''Helper function for argument parsing.'''
        try:
            return int(text)
        except ValueError:
            return text

    import argparse
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.description = __doc__

    parser.add_argument("-i", "--input", type=int_or_str,
                        help="Prefix of the input image sequence",
                        default="/tmp/input/")
    
    parser.add_argument("-o", "--output", type=int_or_str,
                        help="Prefix of the output image sequence",
                        default="/tmp/output/")

    parser.add_argument("-e", "--extension", type=int_or_str,
                        help="Image extension",
                        default=".jpg")

    parser.add_argument("-f", "--first", type=int_or_str,
                        help="Index of the first image",
                        default=0)

    parser.add_argument("-l", "--last", type=int_or_str,
                        help="Index of the last image",
                        default=120)
    
    parser.add_argument("-a", "--inertia", type=int_or_str,
                        help="Background inertia (difficulty to change)",
                        default=0.99)
    
    parser.add_argument("-t", "--threshold", type=int_or_str,
                        help="Noise level (changes in pixel intensity above the threshold are generated by noise)",
                        default=10)

    args = parser.parse_args()
    
    attenuate_background_seq(
        input_sequence_prefix=args.input,
        output_sequence_prefix=args.output,
        img_extension=args.extension,
        first_img_index=args.first,
        last_img_index=args.last,
        alpha=args.inertia,
        threshold=args.threshold)
